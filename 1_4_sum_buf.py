# -*- coding: utf-8 -*-
"""
Created on Fri Aug  2 19:43:59 2019

@author: niili

Суммирующий буфер

Вам дается последовательность целых чисел и вам нужно ее обработать и вывести 
на экран сумму первой пятерки чисел из этой последовательности, затем сумму 
второй пятерки, и т. д.

Но последовательность не дается вам сразу целиком. С течением времени к вам 
поступают её последовательные части. Например, сначала первые три элемента, 
потом следующие шесть, потом следующие два и т. д.

Реализуйте класс Buffer, который будет накапливать в себе элементы 
последовательности и выводить сумму пятерок последовательных элементов по мере 
их накопления.

Одним из требований к классу является то, что он не должен хранить в себе 
больше элементов, чем ему действительно необходимо, т. е. он не должен хранить 
элементы, которые уже вошли в пятерку, для которой была выведена сумма.

Класс должен иметь следующий вид

class Buffer:
    def __init__(self):
        # конструктор без аргументов
    
    def add(self, *a):
        # добавить следующую часть последовательности

    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в 
        # порядке, в котором они были добавлены


Пример работы с классом

buf = Buffer()
buf.add(1, 2, 3)
buf.get_current_part() # вернуть [1, 2, 3]
buf.add(4, 5, 6) # print(15) – вывод суммы первой пятерки элементов
buf.get_current_part() # вернуть [6]
buf.add(7, 8, 9, 10) # print(40) – вывод суммы второй пятерки элементов
buf.get_current_part() # вернуть []
buf.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # print(5), print(5) – вывод сумм 
# третьей и четвертой пятерки
buf.get_current_part() # вернуть [1]


Обратите внимание, что во время выполнения метода add выводить сумму пятерок 
может потребоваться несколько раз до тех пор, пока в буфере не останется менее 
пяти элементов.
"""

class Buffer:
    #--------------------------------------------------------------------------
    def __init__(self):
        # list of elements
        self.elems = []
        # element counter
        self.cntr = 0
        #buffer depth = 5
        self.depth = 5
        
   
        
    #--------------------------------------------------------------------------
    def add(self, *a):
        # добавить следующую часть последовательности
        len_a = len(a)
        # if we have too few elements
        if self.cntr + len_a < self.depth:
            for i in a:
                self.elems.append(i)
                self.cntr += 1
        else:
            sum_e = 0
            # sum from self.elems
            #print("подсчет имеющейся суммы")
            for i in range(self.cntr):
                sum_e += self.elems[i]
            # delete from history
            self.elems.clear()
            
            for i in range(len_a):
                # len_a - i - number of unprocesed elements
                if (self.cntr + len_a - i) >= self.depth:
                    sum_e += a[i]
                    self.cntr += 1
                    if self.cntr == self.depth:
                        print(sum_e)
                        self.cntr = 0
                        sum_e = 0
                else:
                    # if number of unprocessed elmes < buffer depth
                    # then save it
                    self.elems.append(a[i])
                    self.cntr += 1
                
                

    #--------------------------------------------------------------------------
    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в 
        # порядке, в котором они были добавлены
        return self.elems
   
    
    
    
buf = Buffer()
buf.add(1, 2, 3)
buf.get_current_part() # вернуть [1, 2, 3]
buf.add(4, 5, 6) # print(15) – вывод суммы первой пятерки элементов
buf.get_current_part() # вернуть [6]
buf.add(7, 8, 9, 10) # print(40) – вывод суммы второй пятерки элементов
buf.get_current_part() # вернуть []
buf.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # print(5), print(5) – вывод сумм третьей и четвертой пятерки
buf.get_current_part() # вернуть [1]
    
    